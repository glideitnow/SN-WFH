<?xml version="1.0" encoding="UTF-8"?><record_update table="sp_widget">
    <sp_widget action="INSERT_OR_UPDATE">
        <category>custom</category>
        <client_script><![CDATA[api.controller = function ($scope, $q, spScUtil, $location) {
    var c = this;
 
    /**
     * INITIALISATION
     */
 
    // Capture the GlideForm event emitted by spModel, which we will use
    // to save changes made to the variable editor.
 
    var gForm;
 
    $scope.$on('spModel.gForm.initialized', function (e, gFormInstance) {
        gForm = gFormInstance;
    });
 
    /**
     * FORM ACTIONS
     */
 
    // Because both saveVariables() and saveRecordProducer() return a promise,
    // we can use "chaining" to register a function to be executed after the
    // save operation has happened.
 
    c.save = function () {
        saveForm().then(function () {
            // put the sysID in the URL if its not already there, triggering a refresh
            // and thus swapping from the record producer form to the variable editor.
            $location.search('sys_id', c.data.sysId);
        });
    }
 
    // In the case of submit, after the save operation has happened we will want to
    // move the record from draft state, to submitted state.
 
    c.submit = function () {
        saveForm().then(function () {
 
            // mark the record as submitted
            c.server.get({
                action: 'submit',
                sysId: c.data.sysId
            }).then(function () {
 
                // redirect to a "submission successful" page
                $location.search({
                    sys_id: c.data.sysId,
                    table: c.data.tableName,
                    id: 'form' // Ideally a page stating submission was successful, but for now just "form".
                });
            })
 
        });
    };
 
    /**
     * HELPER FUNCTIONS
     */
 
    // Depending on whether this is a new record, either save the record
    // producer, or save the variable editor.
    function saveForm() {
        return c.data.isNewRecord ? saveRecordProducer() : saveVariables();
    }
 
    // This function uses the $q service to allow it to operate asynchonously.
    // That is, the function returns a promise, allowing chaining on the result
    // e.g. saveVariables().then( /** do stuff */ );
 
    function saveVariables() {
        return $q(function (resolve) {
            gForm.$private.events.on('onSubmitted', resolve);
            gForm.submit();
        })
    }
 
    // spScUtil.submitProducer() already returns a promise, so there's no need to use
    // $q here. This function is an almost exact copy of the functionality from the 
    //out-of-box SC Catalog Item widget. 
 
    function saveRecordProducer() {
        return spScUtil.submitProducer(
            c.data.recordProducerForm.sys_id,
            (function (fields) {
                var reqData = {};
                for (var obj in fields)
                    reqData[fields[obj].name] = fields[obj].value;
                return reqData;
            })(c.data.recordProducerForm._fields),
            c.data.sysId,
            {});
    }
 
};]]></client_script>
        <controller_as>c</controller_as>
        <css>.panel-footer {
    display: none;
}</css>
        <data_table>sp_instance</data_table>
        <demo_data/>
        <description/>
        <docs/>
        <field_list/>
        <has_preview>true</has_preview>
        <id>wfh_record_producer</id>
        <internal>false</internal>
        <link><![CDATA[function link(scope, element, attrs, controller) {  }]]></link>
        <name>WFH Record Producer</name>
        <option_schema/>
        <public>true</public>
        <roles/>
        <script><![CDATA[(function() {
 
    // hard-coded variables. Widget could be improved so that these could be defined
    // via configuration, URL parameters, or through a config table.
    var recordProducerSysId = 'c76245111bf45d106a08a9b4bd4bcb57';
    data.tableName = 'x_852034_wfh_requests';
 
    // Allow the client script to mark a record as "submitted"
    if (input && input.action === 'submit') {
        var gr = new GlideRecord(data.tableName);
        gr.get(input.sysId);
        gr.setValue('u_state', '2');
        gr.update();
 
    } else {
 
        // Check the URL for the sys_id parameter (which means an existing record)
        data.sysId = $sp.getParameter('sys_id');
        // If the URL parameter is not set, we know we want to create a new record
        data.isNewRecord = !data.sysId;
 
        // Get the record producer form model
        data.recordProducerForm = $sp.getCatalogItem(recordProducerSysId);
 
        if (data.isNewRecord) {
 
            // if it's a new record, generate a Sys ID
            // which is needed to submit the record producer
            data.sysId = gs.generateGUID();
 
        } else {
 
            // If it's an existing record, get the variable editor widget
            data.varWidget = $sp.getWidget('sp-variable-editor', {
                sys_id: data.sysId,
                table: data.tableName,
                hide_container: true // don't show the border
            });
        }
 
    } 
 
})();]]></script>
        <servicenow>false</servicenow>
        <sys_class_name>sp_widget</sys_class_name>
        <sys_created_by>David.Admin</sys_created_by>
        <sys_created_on>2022-07-19 05:26:39</sys_created_on>
        <sys_id>e023829d1bb85d106a08a9b4bd4bcbb9</sys_id>
        <sys_mod_count>1</sys_mod_count>
        <sys_name>WFH Record Producer</sys_name>
        <sys_package display_value="Working From Home (WFH)" source="x_852034_wfh">ca4c5dfd1ba811106a08a9b4bd4bcb1f</sys_package>
        <sys_policy/>
        <sys_scope display_value="Working From Home (WFH)">ca4c5dfd1ba811106a08a9b4bd4bcb1f</sys_scope>
        <sys_update_name>sp_widget_e023829d1bb85d106a08a9b4bd4bcbb9</sys_update_name>
        <sys_updated_by>David.Admin</sys_updated_by>
        <sys_updated_on>2022-07-19 05:30:01</sys_updated_on>
        <template><![CDATA[<h1>{{::c.data.recordProducerForm.short_description}}</h1>
<div ng-bind-html="::c.data.recordProducerForm.description"></div>
<div ng-switch="::c.data.isNewRecord">
  <div ng-switch-when="true">
    <sp-model form-model="c.data.recordProducerForm" mandatory="true"></sp-model>
  </div>
  <div ng-switch-when="false">
    <sp-widget widget="c.data.varWidget"></sp-widget>
  </div>
  <div>
    <button ng-click="c.submit();">${Submit}</button>
  </div>
</div>]]></template>
    </sp_widget>
</record_update>
