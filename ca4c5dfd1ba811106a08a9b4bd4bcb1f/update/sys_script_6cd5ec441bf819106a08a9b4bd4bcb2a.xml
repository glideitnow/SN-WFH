<?xml version="1.0" encoding="UTF-8"?><record_update sys_domain="global" table="sys_script">
    <sys_script action="INSERT_OR_UPDATE">
        <abort_action>false</abort_action>
        <access>package_private</access>
        <action_delete>false</action_delete>
        <action_insert>true</action_insert>
        <action_query>false</action_query>
        <action_update>true</action_update>
        <active>true</active>
        <add_message>false</add_message>
        <advanced>true</advanced>
        <change_fields>false</change_fields>
        <client_callable>false</client_callable>
        <collection>x_852034_wfh_requests</collection>
        <condition/>
        <description/>
        <execute_function>false</execute_function>
        <filter_condition/>
        <is_rest>false</is_rest>
        <message/>
        <name>Date Validations</name>
        <order>100</order>
        <priority>100</priority>
        <rest_method/>
        <rest_method_text/>
        <rest_service/>
        <rest_service_text/>
        <rest_variables/>
        <role_conditions/>
        <script><![CDATA[(function executeRule(current, previous /*null when async*/ ) {

    var IS_DEBUG = true;
    var DEBUG_PREFIX = 'KIT.SN.BR.Date Validations';
    var ERROR_MODEL = {
        CODE_0: 'Runtime error, please check system logs',
        CODE_10: 'Start date must be [TODAY] or a [FUTURE] date',
        CODE_20: 'End date must be [AFTER] the start date'
    };

    //     mandatory = () => {
    //         throw new Error('Missing parameter!');
    //     }


    // declare script include
    var dateUtil = new DateValidationUtil(current.u_start_date, current.u_end_date);

    try {

        !dateUtil.isFutureDate() ? showError(10) :
            !dateUtil.isValidDateDiff() ? showError(20) :
            '';

    } catch (err) {
        IS_DEBUG ? showError(100) : gs.error('{0}', err);
    }

    function showError(code) {
        try {

            if (typeof code === 'undefined')
                return;

            gs.addErrorMessage(code === 10 ?
                ERROR_MODEL.CODE_10 : code === 20 ?
                ERROR_MODEL.CODE_20 : ERROR_MODEL.CODE_0);
			
            current.setAbortAction(true);
			
        } catch (err) {
            IS_DEBUG ? showError(100) : gs.error('{0}', err);
        }

    }

})(current, previous);]]></script>
        <sys_class_name>sys_script</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2022-07-15 01:27:08</sys_created_on>
        <sys_domain>global</sys_domain>
        <sys_domain_path>/</sys_domain_path>
        <sys_id>6cd5ec441bf819106a08a9b4bd4bcb2a</sys_id>
        <sys_mod_count>21</sys_mod_count>
        <sys_name>Date Validations</sys_name>
        <sys_overrides/>
        <sys_package display_value="Working From Home (WFH)" source="x_852034_wfh">ca4c5dfd1ba811106a08a9b4bd4bcb1f</sys_package>
        <sys_policy/>
        <sys_scope display_value="Working From Home (WFH)">ca4c5dfd1ba811106a08a9b4bd4bcb1f</sys_scope>
        <sys_update_name>sys_script_6cd5ec441bf819106a08a9b4bd4bcb2a</sys_update_name>
        <sys_updated_by>David.Admin</sys_updated_by>
        <sys_updated_on>2022-07-18 06:24:44</sys_updated_on>
        <template/>
        <when>before</when>
    </sys_script>
    <sys_translated_text action="delete_multiple" query="documentkey=6cd5ec441bf819106a08a9b4bd4bcb2a"/>
</record_update>
